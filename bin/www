#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('potfund:server');
var http = require('http');
var models = require('../models');

models.sequelize.sync().then(function () {
  var port = normalizePort(process.env.PORT || '3001');
  app.set('port', port);

  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  models.es.ping({
    requestTimeout: 30000,

    // undocumented params are appended to the query string
    hello: "elasticsearch"
  }, function (error) {
    if (error) {
      console.error('elasticsearch cluster is down!');
    } else {
      console.log('All is well');
    }

    models.es.indices.exists({ index: 'funds' }, function(err, resp) {
      if (err) {
        console.log(err);
      }

      console.log("Does the ES index exist?:");
      console.log(resp);

      // If it exists, refresh its settings & mappings by deleting & creating again.
      if (resp) {
        models.es.indices.delete({ index: 'funds' });

        models.es.indices.create({
          index: 'funds',
          body: {
            'settings': {},
            'mappings': {
              'fund': {
                'properties': {
                  'title': {
                    'type': 'string',
                    'fields': {
                      "raw": { "type": "string", "index": "not_analyzed" }
                    }
                  }
                }
              }
            }
          }
        });
      }
    });
  });

  var CronJob = require('cron').CronJob;
  var lastUpdate = new Date();

  var checkForChanges = function checkForChanges() {
    console.log('You will see this message every 30 second');
    var log = 'Last updated: ' + lastUpdate;
    console.log(log);

    models.funds.findAll({
      where: {
        created_at: {
          $gte: lastUpdate
        }
      },
      order: 'created_at ASC'
    }).then(function(funds) {
      if (funds.length == 0) {
        console.log("nothing to update....\n")
      } else {
        var body = [];
        var funds = funds.map(function(fund) {
          var json = fund.toJSON();
          return json;
        });

        console.log(funds);
        console.log('\n\n')

        // TODO: check queue for duplications! Duplications MAY occur due to timestamp rounding error

        // Prepare body for _bulk processing. Each element in body array HAS to be an object.
        funds.forEach(function(fund) {
          body.push({'index': {'_index': 'funds', '_type': 'fund', '_id': fund.id}});
          var wrapper = {};
          wrapper['title'] = fund.title;
          body.push(wrapper);
        });

        models.es.bulk({
          body: body
        }, function (err, resp) {
          console.log(resp);
        });
      }
    });
  }
  var job = new CronJob('*/30 * * * * *', checkForChanges, null, true);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
});
