#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('potfund:server');
var http = require('http');
var models = require('../models');

var fund_array_to_json = function(array) {
  var funds = array.map(function(fund) {
    var json = fund.toJSON();
    return json;
  });
  return funds;
};

var fields = ["title","tags","maximum_amount","minimum_amount","countries","religion","description","maximum_age","minimum_age","invite_only","link","religion","gender","financial_situation","merit_or_finance","deadline"];
var userFields =  ["username","profile_picture","description","past_work","date_of_birth","nationality","religion","funding_needed","fund_or_user"];

// models.sequelize.sync().then(function () {
  var port = normalizePort(process.env.PORT || '3001');
  app.set('port', port);

  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  models.es.ping({
    requestTimeout: 30000,

    // undocumented params are appended to the query string
    hello: "elasticsearch"
  }, function (error) {
    if (error) {
      console.error('elasticsearch cluster is down!');
    } else {
      console.log('All is well');
    }

    models.es.indices.exists({ index: ['funds', 'users'] }, function(err, resp) {
      if (err) {
        console.log(err);
      }

      console.log("Does the ES index exist?:");
      console.log(resp);

      // If it exists, refresh its settings & mappings by deleting & creating again. This will
      // wipe the existing records. So, once the settings and mappings are FINALIZED, remove deleting function.
      models.es.indices.delete({
        index: 'funds',
        ignore: [404]
      }).then(function(err, resp) {
        if (err) {
          console.log("ERROR IN HERE: " + err);
        } else if (resp) {
          console.log("RESPONSE IN HERE: " + resp);
        }

        models.es.indices.create({
          index: 'funds',
          body: {
            "settings": {
              "analysis": {
                "filter": {
                  "autocomplete_filter": {
                    "type": "edge_ngram",
                    "min_gram": 1,
                    "max_gram": 20
                  }
                },
                "analyzer": {
                  "autocomplete": {
                    "type": "custom",
                    "tokenizer": "standard",
                    "filter": [
                      "lowercase",
                      "autocomplete_filter"
                    ]
                  }
                }
              }
            },
            'mappings': {
              'fund': {
                'properties': {
                  'title': {
                    'type': 'string',
                    'fields': {
                      "autocomplete": { "type": "string", "index_analyzer": "autocomplete" }
                    }
                  },
                  "tags": {
                    "type": "string",
                    "index_name": "tag"
                  },
                  "maximum_amount": {
                    "type": "long"
                  },
                  "minimum_amount": {
                    "type": "long"
                  },
                  "maximum_age": {
                    "type": "integer"
                  },
                  "minimum_age": {
                    "type": "integer"
                  },
                  "invite_only": {
                    "type": "boolean"
                  },
                  "link": {
                    "type": "string"
                  },
                  "religion": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  },
                  "financial_situation": {
                    "type": "string"
                  },
                  "merit_or_finance": {
                    "type": "string"
                  },
                  "countries": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "index": "not_analyzed"
                  },
                  "suggest": {
                    "type": "completion",
                    "index_analyzer": "simple",
                    "search_analyzer": "simple",
                    "payloads": false
                  },
                  "deadline": {
                    "type": "date"
                  }
                }
              }
            }
          }
        }).then(function(err, resp) {
          if (err) {
            console.log("ERROR IN HERE: " + err);
          } else if (resp) {
            console.log("RESPONSE IN HERE: " + resp);
          }

          // Automatically sync ALL on restart
          models.funds.findAll().then(function(funds) {
            var body = [];
            funds = fund_array_to_json(funds);

            console.log(funds);
            console.log('\n\n');

            // Prepare body for _bulk processing. Each element in body array HAS to be an object.
            funds.forEach(function(fund) {
              body.push({'index': {'_index': 'funds', '_type': 'fund', '_id': fund.id}});
              var wrapper = {};

              for (var i = 0; i < fields.length ; i++) {
                wrapper[fields[i]] = fund[fields[i]];
              }

              wrapper["suggest"] = { "input": fund.tags };

              body.push(wrapper);
            });

            models.es.bulk({
              body: body
            }, function (err, resp) {
              console.log(resp);
            });
          }).then(function() {
            models.es.exists({index: 'users'}, function(err, resp){
              if (err) {
                console.log(err);
              };

              console.log("Does the USER ES index exist?:");
              console.log(resp);
              models.es.indices.delete({
                index: 'users',
                ignore: [404]
              }).then(function(err, resp){
                if (err) {
                  console.log("ERROR IN HERE: " + err);
                } else if (resp) {
                  console.log("RESPONSE IN HERE: " + resp);
                }
                models.es.indices.create({
                  index: 'users',
                  body: {
                    "settings": {
                      "analysis": {
                        "filter": {
                          "autocomplete_filter": {
                            "type": "edge_ngram",
                            "min_gram": 1,
                            "max_gram": 20
                          }
                        },
                        "analyzer": {
                          "autocomplete": {
                            "type": "custom",
                            "tokenizer": "standard",
                            "filter": [
                              "lowercase",
                              "autocomplete_filter"
                            ]
                          },
                          "my_english": {
                            "type":      "english",
                            "stopwords": "_english_"
                          }
                        }
                      }
                    },
                    'mappings': {
                      'user': {
                        'properties': {
                          'username': {
                            'type': 'string',
                            'fields': {
                              "autocomplete": { "type": "string", "index_analyzer": "autocomplete", "search_analyzer": "my_english" }
                            }
                          },
                          "profile_picture": {
                            "type": "string",
                            "index": "not_analyzed"
                          },
                          "description": {
                            "type": "string",
                            "search_analyzer": "my_english"
                          },
                          "past_work": {
                            "type": "string",
                            "index": "not_analyzed"
                          },
                          "date_of_birth": {
                            "type": "date"
                          },
                          "nationality": {
                            "type": "string"
                          },
                          "religion": {
                            "type": "string"
                          },
                          "funding_needed": {
                            "type": "integer"
                          },
                          "fund_or_user": {
                            "type": "boolean"
                          },
                          "suggest": {
                            "type": "completion",
                            "index_analyzer": "simple",
                            "search_analyzer": "simple",
                            "payloads": false
                          }
                        }
                      }
                    }
                  }
                }).then(function(err, resp){
                  if (err) {
                    console.log("ERROR IN HERE: " + err);
                  } else if (resp) {
                    console.log("RESPONSE IN HERE: " + resp);
                  }

                  // Automatically sync ALL on restart
                  models.users.findAll().then(function(users) {
                    var userBody = [];
                    users = fund_array_to_json(users);

                    console.log(users);
                    console.log('\n\n');

                    // Prepare body for _bulk processing. Each element in body array HAS to be an object.
                    users.forEach(function(user) {
                      userBody.push({'index': {'_index': 'users', '_type': 'user', '_id': user.id}});
                      var wrapper = {};

                      for (var i = 0; i < userFields.length ; i++) {
                        wrapper[userFields[i]] = user[userFields[i]];
                      }

                      wrapper["suggest"] = { "input": user.username };

                      userBody.push(wrapper);
                    });

                    models.es.bulk({
                      body: userBody
                    }, function (err, resp) {
                      console.log(resp);
                    });
                  }).then(function() {
                    console.log('...Finished sync');
                  });
                })
              })

            })
          });
        });

      });
    });

  });

  var CronJob = require('cron').CronJob;
  var lastUpdate = new Date();

  var checkForChanges = function checkForChanges() {
    console.log('You will see this message every 30 second');
    var log = 'Last updated: ' + lastUpdate;
    console.log(log);

    models.funds.findAll({
      where: {
        created_at: {
          $gte: lastUpdate
        }
      },
      order: 'created_at ASC'
    }).then(function(funds) {
      if (funds.length === 0) {
        console.log("nothing to update....\n");
      } else {
        var body = [];
        var funds = funds.map(function(fund) {
          var json = fund.toJSON();
          return json;
        });

        console.log(funds);
        console.log('\n\n');

        // TODO: check queue for duplications! Duplications MAY occur due to timestamp rounding error
        // TODO: Eventually have to implement queuing system? Querying whole funds table is high volume.

        // Prepare body for _bulk processing. Each element in body array HAS to be an object.
        funds.forEach(function(fund) {
          body.push({'index': {'_index': 'funds', '_type': 'fund', '_id': fund.id}});
          var wrapper = {};
          var fields = ["title","tags","maximum_amount","minimum_amount","countries","description","maximum_age","minimum_age","invite_only","link","religion","gender","financial_situation","merit_or_finance","deadline"];

          for (var i = 0; i < fields.length ; i++) {
            wrapper[fields[i]] = fund[fields[i]];
          }

          body.push(wrapper);
        });

        models.es.bulk({
          body: body
        }, function (err, resp) {
          console.log(resp);

          // Timestamp from table rounds down. Here is the correction to avoid duplication.
          var lastUpdateFromTable = funds[funds.length - 1].created_at;
          lastUpdateFromTable.setSeconds(lastUpdateFromTable.getSeconds() + 1);
          lastUpdate = lastUpdateFromTable;
        });
      }
    });
  };
  var job = new CronJob('*/30 * * * * *', checkForChanges, null, true);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
// });
